
  Create New Repository drop-downCreate a new repository on GitHub.
   To avoid errors, do not initialize the new repository with README, license, or gitignore files.
    You can add these files after your project has been pushed to GitHub.

 Open Terminal (for Mac users) or the command prompt (for Windows and Linux users).

 Change the current working directory to your local project.

 Initialize the local directory as a Git repository.

 git init
 Add the files in your new local repository. This stages them for the first commit.

 git add .
 # Adds the files in the local repository and stages them for commit.
  To unstage a file, use 'git reset HEAD YOUR-FILE'.
 Commit the files that you've staged in your local repository.
 git commit -m 'First commit'
 # Commits the tracked changes and prepares them to be pushed to a remote repository.
  To remove this commit and modify the file, use 'git reset --soft HEAD~1' and commit and add the file again.
 Copy remote repository URL fieldAt the top of your GitHub repository's Quick Setup page,
  click  to copy the remote repository URL.

 In Terminal,
 add the URL for the remote repository where your local repository will be pushed.

 git remote add origin remote repository URL
 # Sets the new remote
 git remote -v
 # Verifies the new remote URL
 Push the changes in your local repository to GitHub.

 git push origin master
 # Pushes the changes in your local repository
 up to the remote repository you specified as the origin



 ///remote:::
 'git remote add' [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=<fetch|push>] <name> <url>



 add
 Adds a remote named <name> for the repository at <url>.

 The command git fetch <name> can then be used to create and update remote-tracking branches <name>/<branch>.

 With -f option, git fetch <name> is run immediately after the remote information is set up.
 With --tags option, git fetch <name> imports every tag from the remote repository.
 With --no-tags option, git fetch <name> does not import tags from the remote repository.

 By default, only tags on fetched branches are imported (see git-fetch[1]).

 With -t <branch> option, instead of the default glob refspec for the remote to track all branches
  under the refs/remotes/<name>/ namespace, a refspec to track only <branch> is created.
  You can give more than one -t <branch> to track multiple branches without grabbing all branches.

 With -m <master> option, a symbolic-ref refs/remotes/<name>/HEAD is set up to point at remoteâ€™s <master> branch.
  See also the set-head command.

 When a fetch mirror is created with --mirror=fetch, the refs will not be stored in the refs/remotes/ namespace,
  but rather everything in refs/ on the remote will be directly mirrored into refs/ in the local repository.
   This option only makes sense in bare repositories, because a fetch would overwrite any local commits.

 When a push mirror is created with --mirror=push, then git push will always behave as if --mirror was passed.